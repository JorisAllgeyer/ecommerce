1. créer utilisateur + se connecter (isactif = true)
2. passer une commande

Entities: 
OK adresse
OK article
OK articlepanier
OK cartepaiement
OK commande
OK lignecommande
OK utilisateur

iceFaces
primeFaces
richFaces
Mojarra

Fonctionnalités à réaliser de bout en bout (depuis l'interface graphique jusqu'à la BDD) :

  1/ Création d'un compte Utilisateur
  2/ Connexion d'un utilisateur puis redirection en fonction du profil vers une page xhtml.

Côté Fontend, 7 pages xhtml à créer :

  1) index.jsp : qui redirige systématiquement vers accueil.xhtml
  2) accueil.xhtml : qui propose deux liens de redirection, un vers add-utilisateur.xhtml et un autre vers login-utilisateur.xhtml
  3) add-utilisateur.xhtml
  4) login-utilisateur.xhtml
  5) gestion-achats.xhtml
  6) gestion-articles.xhtml
  7) gestion-admin.xhtml

Côté Backend, voici les interfaces et classes à créer :

- Couche Frontend (Backing Beans) :
UtilisateurBean
GestionaAchatBean / GestionArticlesBean / GestionAdminBean

- Couche Backend (Interfaces et classes) :
- Couche persistance (Interfaces et classes) :


WebServices à créer :

1/ webService qui permet de récupérer la liste des utilisateurs (uniquement les emails et panier correspondants) qui ont un panier non vide. (Avec authentification d'un profil "WS" et un login/password)

Set<String, List<ArticlePanier>> getUtilisateursAvecPanierNonVide()

@RolesAllowed({"WS"})
@GET
@Path("emails-panier")
@Produces(MediaType.APPLICATION_JSON + CHARSET)
 Set<String, List<ArticlePanier>> getUtilisateursAvecPanierNonVide()


